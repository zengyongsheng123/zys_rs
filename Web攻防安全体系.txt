来吧 我们过一遍基础的东西 然后直接讲一下一些没见过的东西
 首先 搞逆向肯定要懂一些算法
 比如 哈希 对称 非对称这些 当然 还有自研 和魔改的 以及一些小的算法不怎么常见
 算法差不多就是这么样子
 然后就是常见的协议 我这里就说一下web端的常见的协议 有这么几个
 一个是http HTTPs 然后https又分为很多个版本 1.0 2.0 3.0 我这里给你演示一下吧
 我们是可以通过抓包工具看到一些信息的
 websocket 这个主要用于弹幕直播间之类的 有时候需要去解密数据信息 py模拟wss请求
 protobuf 这个的话 不是很常见 他就是谷歌公司推出的一种协议 主要是传输快 便捷 要去模拟这种发送请求其实也不是很难的 主要是找映射的关系

 协议部分差不多就是这样

 然后就是webpack一种打包框架 也比较的常见 主要是把加载器模块啥的扣到本地 缺啥补啥就ok

 然后就是hook与补环境了
 补环境这种方式 主要是对抗动态变化的算法而有效的一种方案 但是并发会有限制

 hook的话 我们可以理解为就是把原生函数比如json.parse 他的底层实现c/c++转变成我们js层面实现 保留了底层的实现 重写了他的实现
 当然这会留些痕迹 比如你重写的函数 是不带native code这样的关键字的 反爬的就会检测这个

 接下来就是代理proxy 这个主要用于补环境当中 在获取 设置属性的时候进行一个拦截 也就是中间人的操作

 接下来就是环境 bom和dom

 我们补环境把 主要就是补的dom和bom这两个东西
 dom也就是我们的document的的一些属性 方法之类的

 bom呢也就是window location navigator之类的等

 又一种环境检测的方案就是
  iframe标签隔离环境 沙箱检测 他会创建一个iframe标签 用iframe标签内的contentWindow进行检测 这个contentWindow和window是不相关的
  这种的话 我们先做个了解 以后详细的讲讲

后面的话 就涉及到了我们web端最难的部分 vmp与wasm的算法还原

vmp对抗的几种方案
    1.rpc
    2.补环境
    3.插桩还原算法
    4.基于ast反编译vmp
    5.魔改谷歌浏览器 使其进行算法自吐
    6.基于系统级别 比如Windows Linux Mac这三个系统有三个不同的方案 魔改系统 实现算法的自吐
    7.基于底层最底层 也就是cpu 内存级别 通过感应电流进行算法预测
    目前我了解过的就这些 可能以后会有别的

    接下来我们说一说wasm

wasm的对抗方案
    1.rpc
    2.补环境
    算法还原:
    我们的浏览器会帮我们自动把wasm解析成wat这样的文件 使得我们能够看到wasm语法的代码 我们可以通过浏览器达断点进行动态调试
    但是这种会搞死人的 我们应该把wasm转成c代码这个是有工具的不用我们操心 然后将c代码放到ida里面 进行静态分析+动态调试 ida是支持动态调试的

    扣代码的方案 把wasm文件copy到本地 用node加载模块 缺啥补啥 不过这种方案的话 一般都要补环境 而且wasm在你不确定的情况下 也就是黑盒里面摸球一样
    你根本不知道他会跟js交互 检测一些什么 所以这种方案要谨慎
    wasm差不多就这几种把 也可以通过魔改谷歌 和魔改系统进行算法自吐



闲聊:
 tk有哪些逆向+风控点

 逆向:x-b x-g

 风控:验证码 IP 账号



